@page "/char-sheet"
@using Microsoft.JSInterop
@using Models.Character
@using Models.Sheet
@using Attribute = Models.Character.Attribute
@inject HttpClient Http
@inject IJSRuntime JS

<h1>CharSheet</h1>

<div class="container">
    <div class="row justify-content-between">
        
        @* Attributes *@
        <div class="col-xs-12 col-xl-6">
            <div class="row">
                <h2>Attributes</h2>
            </div>
            <div class="row">
                <div class="col-2">Name</div>
                <div class="col-2">Base</div>
                <div class="col-2">Total</div>
                <div class="col-6">Metatype</div>
            </div>
            @foreach (var stat in Attributes)
            {
                <div class="row">
                    <div class="col-2">@stat.Name</div>
                    <div class="col-2">@stat.Base</div>
                    <div class="col-2"><strong>@stat.Total</strong></div>
                    <div class="col-6">@stat.Min / @stat.Max (@stat.Aug)</div>
                </div>
            }
        </div>

        @* Damage Tracks *@
        <div class="col-xs-6 col-xl-3">
            <div class="row">
                <h3>Physical Track</h3>
            </div>

            <div id="physical-track" class="row track-utils offset-xl-1">
            @for (int i = 1; i <= DamageTrackPhysical.Boxes + DamageTrackPhysical.Overflow + 1; i++)
            {
                var j = i;

                @* Wound *@
                if (i <= DamageTrackPhysical.Boxes)
                {
                    if (i % 3 == 0)
                    {
                        <span class="track border border-warning">wound -@(i / 3)</span>
                    }
                    else
                    {
                        <span class="track border border-warning">box</span>
                    }
                }

                @* Overflow *@
                if (i > DamageTrackPhysical.Boxes)
                {
                    <span class="track track-overflow border border-warning">OF</span>
                }

                if (i == DamageTrackPhysical.Boxes + DamageTrackPhysical.Overflow + 1)
                {
                    <span class="track track-overflow border border-warning">
                        <div class="row h-100 justify-content-center align-items-center">
                            <img src="icons/ded.png" />
                        </div>
                    </span>
                }

                @* Line Break on every third box *@
                if (i % 3 == 0)
                {
                    <div class="w-100"></div>
                }
            }
            </div>
        </div>

        <div class="col-xs-6 col-xl-3">
            <div class="row">
                <h3>Stun Track</h3>
            </div>

            <div id="stun-track" class="row track-utils offset-xl-1">
            @for (int i = 1; i <= DamageTrackStun.Boxes + DamageTrackStun.Overflow + 1; i++)
            {
                var j = i;

                @* Wound *@
                if (i <= DamageTrackStun.Boxes)
                {
                    if (i % 3 == 0)
                    {
                        <span class="track border border-warning">wound -@(i / 3)</span>
                    }
                    else
                    {
                        <span class="track border border-warning">box</span>
                    }
                }

                @* Overflow *@
                if (i > DamageTrackStun.Boxes)
                {
                    <span class="track track-overflow border border-warning">OF</span>
                }

                if (i == DamageTrackStun.Boxes + DamageTrackStun.Overflow + 1)
                {
                    <span class="track track-overflow border border-warning">
                        <div class="row h-100 justify-content-center align-items-center">
                            <img src="icons/ded.png" />
                        </div>
                    </span>
                }

                @* Line Break on every third box *@
                if (i % 3 == 0)
                {
                    <div class="w-100"></div>
                }
            }
            </div>
        </div>

        @* Important *@
        @* TODO: make this a list so that user can add what they want to the list *@
        <div class="col-xs-12 col-xl-6">
            <div class="row">
                <h2>Important</h2>
            </div>
            <div class="row justify-content-between">
                <div class="col">Initiative</div>
                <div class="col .ml-auto">@Initiative</div>
            </div>
            <div class="row justify-content-between">
                <div class="col">Armor</div>
                <div class="col .ml-auto">@Armor</div>
            </div>
            <div class="row justify-content-between">
                <div class="col">Defense</div>
                <div class="col .ml-auto">@DefenseTest</div>
            </div>
            <div class="row justify-content-between">
                <div class="col">Full Defense</div>
                <div class="col .ml-auto">@FullDefenseTest</div>
            </div>
        </div>

        @* Current Effects *@
        <div class="col-xs-12 col-xl-6">
            <div class="row">
                <h2>Current Effects</h2>
            </div>
            <div class="row justify-content-between">
                <div class="col-5">Name</div>
                <div class="col-4">Value Affected</div>
                <div class="col-3">Rating</div>
            </div>
            @foreach (var effect in CurrentEffects)
            {
                <div class="row justify-content-between">
                    <div class="col-5">@effect.Name</div>
                    <div class="col-4">@effect.ValueToAffect</div>
                    <div class="col-3">@effect.Rating</div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Attribute> Attributes = new List<Attribute>();
    private string Initiative;
    private string Armor;
    private string DefenseTest;
    private string FullDefenseTest;
    private DamageTrack DamageTrackPhysical = new DamageTrack();
    private DamageTrack DamageTrackStun = new DamageTrack();
    private List<Effect> CurrentEffects = new List<Effect>();

    protected override async Task OnInitializedAsync()
    {
        Root root = await Http.GetFromJsonAsync<Root>("sample-data/wall.json");
        Character character = root.Characters.Character;

        Attribute Body = character.Attributes.Attribute[0];
        Body.Total += GetEffectTotal("BOD", character.Effects);

        Attribute Agility = character.Attributes.Attribute[1];
        Agility.Total += GetEffectTotal("AGI", character.Effects);

        Attribute Reaction = character.Attributes.Attribute[2];
        Reaction.Total += GetEffectTotal("REA", character.Effects);

        Attribute Strength = character.Attributes.Attribute[3];
        Strength.Total += GetEffectTotal("STR", character.Effects);

        Attribute Charisma = character.Attributes.Attribute[4];
        Charisma.Total += GetEffectTotal("CHA", character.Effects);

        Attribute Intuition = character.Attributes.Attribute[5];
        Intuition.Total += GetEffectTotal("INT", character.Effects);

        Attribute Logic = character.Attributes.Attribute[6];
        Logic.Total += GetEffectTotal("LOG", character.Effects);

        Attribute Willpower = character.Attributes.Attribute[7];
        Willpower.Total += GetEffectTotal("WIL", character.Effects);

        Attribute Edge = character.Attributes.Attribute[8];
        Attribute Magic = character.Attributes.Attribute[9];

        Attributes.Add(Body);
        Attributes.Add(Agility);
        Attributes.Add(Reaction);
        Attributes.Add(Strength);
        Attributes.Add(Charisma);
        Attributes.Add(Intuition);
        Attributes.Add(Logic);
        Attributes.Add(Willpower);
        Attributes.Add(Edge);
        Attributes.Add(Magic);

        // Important

        // Initiative
        //  Bonus - REA + INT
        //  Dice - Any power or cyberware of Improved Reflexes or Wired Reflexes
        int improvedReflexesRating = Convert.ToInt32(character.Powers.Power.First(p => p.Name == "Improved Reflexes").Rating);
        int wiredReflexesRating = Convert.ToInt32(character.Cyberwares?.Cyberware.First(p => p.Name == "Wired Reflexes").Rating);

        int initiativeDice = improvedReflexesRating + wiredReflexesRating + 1;

        Initiative = $"{(Reaction.Total + Intuition.Total)} + {initiativeDice}d6";

        // Armor
        Armor = character.Armor;

        // Defense Test
        DefenseTest = (Reaction.Total + Intuition.Total).ToString();

        // Full Defense Track
        // TODO: check for Agile Defender, Too Pretty to Hit where Willpower isn't used as the additional stat
        FullDefenseTest = (Reaction.Total + Intuition.Total + Willpower.Total).ToString();

        // Physical Damage Track (BOD / 2) [round up] + 8
        DamageTrackPhysical = new DamageTrack("Physical", Body.Total);

        // Stun Damage Track (WIL / 2) [round up] + 8
        DamageTrackStun = new DamageTrack("Stun", Willpower.Total);

        // Current Effects - Name, type affected, and Rating
        CurrentEffects = character.Effects;
    }

    int GetEffectTotal(string valueToAffect, List<Effect> effects)
    {
        if (effects.Count == 0)
        {
            return 0;
        }

        return effects
            .Where(e => e.Type == Effect.EffectType.ATTRIBUTE
                && e.ValueToAffect == valueToAffect
                && e.IsActive)
            .Sum(e => e.Rating);
    }
}
